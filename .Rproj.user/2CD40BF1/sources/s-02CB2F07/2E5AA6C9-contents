##### Xgboost

library(xgboost)
library(pROC)
library(mlr)

SSNAPds_training_30mortality_xgb <- SSNAPds_training_30mortality
SSNAPds_training_30mortality_xgb$mortality_30_day %<>% as.factor()


SSNAPds_test_30mortality_xgb <- SSNAPds_test_30mortality
SSNAPds_test_30mortality_xgb$mortality_30_day %<>% as.factor()

SSNAPds_2019_30mortality_xgb <- SSNAPds_2019_30mortality
SSNAPds_2019_30mortality_xgb$mortality_30_day %<>% as.factor()




#create tasks
traintask <- makeClassifTask(data = as.data.frame( SSNAPds_training_30mortality_xgb),target = "mortality_30_day")
testtask <- makeClassifTask(data = as.data.frame(SSNAPds_test_30mortality_xgb),target = "mortality_30_day")

test2019task <- makeClassifTask(data = as.data.frame(SSNAPds_2019_30mortality_xgb),target = "mortality_30_day")


# set the learner 
# create learner
lrn <- makeLearner("classif.xgboost",predict.type = "prob")
lrn$par.vals <- list( objective="binary:logistic", eval_metric="error") 
#set parameter space
params <- makeParamSet( makeDiscreteParam("booster",values = c("gbtree","gblinear")), 
                        makeDiscreteParam("nrounds",values = c(1000L,5000L,10000L)), 
                        makeIntegerParam("max_depth",lower = 3L,upper = 10L), 
                        makeNumericParam("eta",lower = 0.001,upper = 0.5),
                        makeNumericParam("min_child_weight",lower = 1L,upper = 10L),
                        makeNumericParam("gamma",lower = 0L,upper = 1L),
                        makeNumericParam("subsample",lower = 0.5,upper = 1), 
                        makeNumericParam("colsample_bytree",lower = 0.5,upper = 1))
#set resampling strategy
rdesc <- makeResampleDesc("CV",stratify = T,iters=5L)
#search strategy
ctrl <- makeTuneControlRandom(maxit = 1000L)
#set parallel backend
library(parallel)
library(parallelMap) 
parallelStartSocket(cpus = detectCores())
#parameter tuning
mytune <- tuneParams(learner = lrn, task = traintask, resampling = rdesc, measures = acc, 
                     par.set = params, control = ctrl, show.info = T)
mytune$resampling
#set hyperparameters
lrn_tune <- setHyperPars(lrn,par.vals = mytune$x)
#train model
xgmodel <- mlr::train(learner = lrn_tune,task = traintask)

# predict on training set
pred_train_xgb <- predict(xgmodel,traintask, type = "prob")
roc_train_xgb <- roc(SSNAPds_training_30mortality$mortality_30_day ~ pred_train_xgb$data$prob.1, plot = TRUE, print.auc = TRUE)
as.numeric(roc_train_xgb$auc)
ci.auc(SSNAPds_training_30mortality$mortality_30_day, pred_train_xgb$data$prob.1) 

#predict on test set
pred_test_xgb <- predict(xgmodel,testtask, type = "prob")
roc_test_xgb <- roc(SSNAPds_test_30mortality$mortality_30_day ~ pred_test_xgb$data$prob.1, plot = FALSE, print.auc = TRUE)
as.numeric(roc_test_xgb$auc)
ci.auc(SSNAPds_test_30mortality$mortality_30_day, pred_test_xgb$data$prob.1) 

#predict on 2019 temporal validation set

pred_2019_xgb <- predict(xgmodel,test2019task, type = "prob")
roc_2019_xgb <- roc(SSNAPds_2019_30mortality$mortality_30_day ~ pred_2019_xgb$data$prob.1, plot = TRUE, print.auc = TRUE)
as.numeric(roc_2019_xgb$auc)
ci.auc(SSNAPds_2019_30mortality$mortality_30_day, pred_2019_xgb$data$prob.1) 

