testtask <- makeClassifTask(data = as.data.frame(validation_dataset),target = "mortality_30_day")
prob_xgb <- predict(xgboost_model,testtask, type = "prob")
# AUC and 95% CI
roc_xgb <- roc(validation_dataset_xgb$mortality_30_day ~ prob_xgb$data$prob.1, plot = FALSE, print.auc = TRUE)
AUC <- as.numeric(roc_xgb$auc)
AUC_95CI <- ci.auc(validation_dataset_xgb$mortality_30_day, prob_xgb$data$prob.1)
AUC_and_95CI <- paste('The AUC and 95% Confidence Interval for XGBoost are:', round(AUC,3), ' (', round(AUC_95CI[1],3),'to',round(AUC_95CI[3],3),')')
# Brier score, calibration-in-the-large and calibration slope and 95% confidence interval
# calibration plot, Brier score, calibration-in-the-large and calibration slope
res_xgboost <- val.prob(prob_xgb$data$prob.1, validation_dataset$mortality_30_day)
# Bootstrapping different samples
data_bootstrap <- cbind(prob_xgb$data$prob.1, validation_dataset$mortality_30_day)
xgboost_val <- boot_val(data_bootstrap)
# Brier Score and 95% CI
xgboost_brier <- round(res_xgboost['Brier'],3)
xgboost_brier_boot <- unlist(map(xgboost_val, `[`, c("Brier"))) %>% as.numeric()
xgboost_brier_boot_ci <- calc_ci("Brier",   xgboost_val, 3)
xgboost_brier_and_95CI <- paste('The Brier Score and 95% Confidence Interval for XGBoost are:', xgboost_brier, xgboost_brier_boot_ci)
# Calibration-in-the-large and 95% CI
xgboost_calibration_in_the_large <- round( res_xgboost['Intercept'],3)
xgboost_intercept_boot_ci <- calc_ci("Intercept",   xgboost_val, 3)
xgboost_intercept_and_95CI <- paste('The Calibration-in-the-large and 95% Confidence Interval for XGBoost are:', xgboost_calibration_in_the_large, xgboost_intercept_boot_ci)
# Calibration slope and 95% CI
xgboost_calibration_slope <- round(res_xgboost['Slope'],3)
xgboost_slope_boot_ci <- calc_ci("Slope",   xgboost_val, 3)
xgboost_slope__and_95CI <- paste('The Calibration Slope and 95% Confidence Interval for XGBoost are:',xgboost_calibration_slope, xgboost_slope_boot_ci)
# Decision curve analysis
netBenefit_xgb <- netBenefit(prob_xgb$data$prob.1,validation_dataset$mortality_30_day )
FPrate <- length(which(validation_dataset$mortality_30_day==0))/length(validation_dataset$mortality_30_day)
FPrate_test <- netBenefit_all(FPrate,1:100)
# libraries needed------------------------------------------------------
library(tidyr)
library(purrr)
library(dplyr)
library(rms)
library(caret)
library(readr)
library(xgboost)
library(mlr)
library(pROC)
library(e1071)
# Functions needed-------------------------------------------------------
### functions for calculating 95% confidence interval by bootstrapping
boot_val <- function(data){
set.seed(48572)
out <- list()
data <- as.data.frame(data)
for(i in 1:500){
df <- sample_n(data, nrow(data), replace = TRUE)
out[[i]] <- val.prob(df[,1],df[,2])
}
return(out)
}
calc_ci <- function(metric, boot_vals, n){
x <- unlist(map(boot_vals, `[`, c(metric)))
paste0("(", round(quantile(x, 0.025), n), " to ",
round(quantile(x, 0.975), n), ")")
}
### functions for calculating net benefit for decision curve analysis
netBenefit <- function(predProb, trueClass){
netBenefit <- matrix(0,nrow = 100,ncol = 1)
for (i in 1:100) {
pt <- i*0.01
predClass <-  ifelse(predProb >= pt, 1,0)
pred <- factor(predClass,levels = c(0,1))
truth <- factor(trueClass,levels = c(0,1))
confuMatrix <- confusionMatrix(pred,truth)
a <- confuMatrix$table[2,2]/length(predClass)    # true positive count/n total number = Detection Rate
b <-  confuMatrix$table[2,1]/length(predClass)   # false positive count/n total number = Detection prevalence - detection rate
netBenefit[i] <- a - b*pt/(1-pt)
}
return(netBenefit)
}
# net benefit for treating all
netBenefit_all <- function(FPrate,pt){
1 - FPrate/(1-pt*0.01)
}
# Load validation dataset ------------------------------------------------------
validation_dataset <- read.csv(file="validation_sample.csv")[,-1]   # the dataset that one wants to externally validate
# Load pre-trained models -----------------------------------------------------
xgboost_model <- readRDS("XGBoost_pretrained_model.RDS")
validation_dataset$mortality_30_day <- validation_dataset$mortality_30_day %>% as.factor()
testtask <- makeClassifTask(data = as.data.frame(validation_dataset),target = "mortality_30_day")
prob_xgb <- predict(xgboost_model,testtask, type = "prob")
# AUC and 95% CI
roc_xgb <- roc(validation_dataset_xgb$mortality_30_day ~ prob_xgb$data$prob.1, plot = FALSE, print.auc = TRUE)
prob_xgb$data$prob.1
# AUC and 95% CI
roc_xgb <- roc(validation_dataset$mortality_30_day ~ prob_xgb$data$prob.1, plot = FALSE, print.auc = TRUE)
AUC <- as.numeric(roc_xgb$auc)
AUC_95CI <- ci.auc(validation_dataset$mortality_30_day, prob_xgb$data$prob.1)
AUC_and_95CI <- paste('The AUC and 95% Confidence Interval for XGBoost are:', round(AUC,3), ' (', round(AUC_95CI[1],3),'to',round(AUC_95CI[3],3),')')
# calibration plot, Brier score, calibration-in-the-large and calibration slope
res_xgboost <- val.prob(prob_xgb$data$prob.1, validation_dataset$mortality_30_day)
# Bootstrapping different samples
data_bootstrap <- cbind(prob_xgb$data$prob.1, validation_dataset$mortality_30_day)
# calibration plot, Brier score, calibration-in-the-large and calibration slope
res_xgboost <- val.prob(prob_xgb$data$prob.1, validation_dataset$mortality_30_day)
prob_xgb$data$prob.1
validation_dataset$mortality_30_day
# calibration plot, Brier score, calibration-in-the-large and calibration slope
res_xgboost <- val.prob(prob_xgb$data$prob.1, validation_dataset$mortality_30_day)
# calibration plot, Brier score, calibration-in-the-large and calibration slope
res_xgboost <- val.prob(prob_xgb$data$prob.1, as.numeric(validation_dataset$mortality_30_day))
# Bootstrapping different samples
data_bootstrap <- cbind(prob_xgb$data$prob.1, validation_dataset$mortality_30_day)
xgboost_val <- boot_val(data_bootstrap)
# Brier Score and 95% CI
xgboost_brier <- round(res_xgboost['Brier'],3)
xgboost_brier_boot <- unlist(map(xgboost_val, `[`, c("Brier"))) %>% as.numeric()
xgboost_brier_boot_ci <- calc_ci("Brier",   xgboost_val, 3)
xgboost_brier_and_95CI <- paste('The Brier Score and 95% Confidence Interval for XGBoost are:', xgboost_brier, xgboost_brier_boot_ci)
# Calibration-in-the-large and 95% CI
xgboost_calibration_in_the_large <- round( res_xgboost['Intercept'],3)
xgboost_intercept_boot_ci <- calc_ci("Intercept",   xgboost_val, 3)
xgboost_intercept_and_95CI <- paste('The Calibration-in-the-large and 95% Confidence Interval for XGBoost are:', xgboost_calibration_in_the_large, xgboost_intercept_boot_ci)
# Calibration slope and 95% CI
xgboost_calibration_slope <- round(res_xgboost['Slope'],3)
xgboost_slope_boot_ci <- calc_ci("Slope",   xgboost_val, 3)
xgboost_slope__and_95CI <- paste('The Calibration Slope and 95% Confidence Interval for XGBoost are:',xgboost_calibration_slope, xgboost_slope_boot_ci)
netBenefit_xgb <- netBenefit(prob_xgb$data$prob.1,validation_dataset$mortality_30_day )
FPrate <- length(which(validation_dataset$mortality_30_day==0))/length(validation_dataset$mortality_30_day)
FPrate_test <- netBenefit_all(FPrate,1:100)
###print the results---------------------------------------
print(xgboost_brier_and_95CI)
print(AUC_and_95CI)
print(xgboost_intercept_and_95CI)
print(xgboost_slope__and_95CI)
par(1,2)
val.prob(prob_xgb$data$prob.1, validation_dataset$mortality_30_day)
val.prob(prob_xgb$data$prob.1, as.numeric(validation_dataset$mortality_30_day))
par(mfrow=c(1,2))
val.prob(prob_xgb$data$prob.1, as.numeric(validation_dataset$mortality_30_day))
plot(netBenefit_xgb,type="l",col="blue",ylim = c(-0.2,0.6),lty=1,xlab = "Threshold probability in %",ylab = "Net Benefit",main = 'XGBoost Decision Curves')
lines(FPrate_test,lty=3)
abline(h=0, col="blue")
legend(60,0.53, legend=c("XGBoost","Treating all","Y = 0, Treating none"),
col=c("blue","black","blue"),lty = c(1,3,1),cex = 0.75)
plot(val.prob(prob_xgb$data$prob.1, as.numeric(validation_dataset$mortality_30_day)))
par(mfrow=c(1,2))
val.prob(prob_xgb$data$prob.1, as.numeric(validation_dataset$mortality_30_day))
plot(netBenefit_xgb,type="l",col="blue",ylim = c(-0.2,0.6),lty=1,xlab = "Threshold probability in %",ylab = "Net Benefit",main = 'XGBoost Decision Curves')
lines(FPrate_test,lty=3)
abline(h=0, col="blue")
legend(50,0.53, legend=c("XGBoost","Treating all","Y = 0, Treating none"),
col=c("blue","black","blue"),lty = c(1,3,1),cex = 0.75)
val.prob(prob_xgb$data$prob.1, as.numeric(validation_dataset$mortality_30_day),pl=TRUE)
x <- val.prob(prob_xgb$data$prob.1, as.numeric(validation_dataset$mortality_30_day),pl=TRUE)
plot(x)
x <- val.prob(prob_xgb$data$prob.1, as.numeric(validation_dataset$mortality_30_day),group=TRUE)
x <- val.prob(prob_xgb$data$prob.1, as.numeric(validation_dataset$mortality_30_day), group=TRUE)
x <- val.prob(prob_xgb$data$prob.1, as.numeric(validation_dataset$mortality_30_day))
x <- val.prob(prob_xgb$data$prob.1, as.numeric(validation_dataset$mortality_30_day),g.group=2)
x
x <- val.prob(prob_xgb$data$prob.1, as.numeric(validation_dataset$mortality_30_day),g.group=1)
x <- val.prob(prob_xgb$data$prob.1, as.numeric(validation_dataset$mortality_30_day),group = TRUE, g.group=1)
par(mfrow=c(1,2))
x <- val.prob(prob_xgb$data$prob.1, as.numeric(validation_dataset$mortality_30_day))
plot(netBenefit_xgb,type="l",col="blue",ylim = c(-0.2,0.6),lty=1,xlab = "Threshold probability in %",ylab = "Net Benefit")
lines(FPrate_test,lty=3)
abline(h=0, col="blue")
legend(50,0.53, legend=c("XGBoost","Treating all","Y = 0, Treating none"),
col=c("blue","black","blue"),lty = c(1,3,1),cex = 0.75)
val.prob(prob_xgb$data$prob.1, as.numeric(validation_dataset$mortality_30_day))
plot(netBenefit_xgb,type="l",col="blue",ylim = c(-0.2,0.6),lty=1,xlab = "Threshold probability in %",ylab = "Net Benefit")
lines(FPrate_test,lty=3)
abline(h=0, col="blue")
legend(50,0.53, legend=c("XGBoost","Treating all","Y = 0, Treating none"),
col=c("blue","black","blue"),lty = c(1,3,1),cex = 0.75)
set.seed(1)
n <- 200
x1 <- runif(n)
x2 <- runif(n)
x3 <- runif(n)
logit <- 2*(x1-.5)
P <- 1/(1+exp(-logit))
y <- ifelse(runif(n)<=P, 1, 0)
d <- data.frame(x1,x2,x3,y)
f <- lrm(y ~ x1 + x2 + x3, subset=1:100)
pred.logit <- predict(f, d[101:200,])
phat <- 1/(1+exp(-pred.logit))
val.prob(phat, y[101:200], m=20, cex=.5)  # subgroups of 20 obs.
v <- val.prob(phat, y[101:200], group=x1[101:200], g.group=2)
val.prob(prob_xgb$data$prob.1, as.numeric(validation_dataset$mortality_30_day),m=20)
v
v <- val.prob(phat, y[101:200], group=x1[101:200], g.group=2)
v
plot(v)
plot(v, flag=function(stats) ifelse(
stats[,'ChiSq2'] > qchisq(.95,2) |
stats[,'B ChiSq'] > qchisq(.95,1), '*', ' ') )
# Load pre-trained models -----------------------------------------------------
LR_elasticnet_interaction_model <- readRDS("LR_elastic_net_interaction_terms_model.RDS")
View(LR_elasticnet_interaction_model)
View(LR_elasticnet_interaction_model)
View(LR_elasticnet_interaction_model)
# libraries needed------------------------------------------------------
library(tidyr)
library(purrr)
library(dplyr)
library(rms)
library(caret)
library(readr)
library(xgboost)
library(mlr)
library(pROC)
library(e1071)
# Load pre-trained models -----------------------------------------------------
LR_elasticnet_int_model <- readRDS("LR_elastic_net_interaction_terms_model.RDS")
# Load validation dataset ------------------------------------------------------
validation_dataset <- read.csv(file="validation_sample.csv")[,-1]   # the dataset that one wants to externally validate
LR_elasticnet_int_model$trainingData <- NA
x_test_int <- model.matrix(mortality_30_day ~.^2, validation_dataset)[,-1]
prob_test_elasnet_int <- LR_elasticnet_int_model %>% predict(newdata = validation_dataset, type = "prob")
library(glmnet)
install.packages("glmnet")
library(glmnet)
prob_test_elasnet_int <- LR_elasticnet_int_model %>% predict(newdata = validation_dataset, type = "prob")
roc_test_elasnet_int <- roc(SSNAPds_test_30mortality$mortality_30_day ~ prob_test_elasnet_int$`1`, plot = FALSE, print.auc = TRUE)
roc_test_elasnet_int <- roc(validation_dataset$mortality_30_day ~ prob_test_elasnet_int$`1`, plot = FALSE, print.auc = TRUE)
as.numeric(roc_test_elasnet_int$auc)
ci.auc(SSNAPds_test_30mortality$mortality_30_day, prob_test_elasnet_int$`1`)
ci.auc(validation_dataset$mortality_30_day, prob_test_elasnet_int$`1`)
saveRDS(LR_elasticnet_int_model, "LR_elastic_net_interaction_terms_model.RDS")
# Load pre-trained models -----------------------------------------------------
LR_elasticnet_int_model <- readRDS("LR_elastic_net_interaction_terms_model.RDS")
View(LR_elasticnet_int_model)
saveRDS(LR_elasticnet_int_model, "LR_elasticnet_interaction_pretrained_model.RDS")
# Load pre-trained models -----------------------------------------------------
LR_elasticnet_int_model <- readRDS("LR_elasticnet_interaction_pretrained_model.RDS")
View(LR_elasticnet_int_model)
View(LR_elasticnet_int_model)
View(LR_elasticnet_int_model)
performance_function <- function(pred_prob,y){
# AUC and 95% CI
roc <- roc(y ~ pred_prob, plot = FALSE, print.auc = TRUE)
AUC <- as.numeric(roc_xgb$auc)
AUC_95CI <- ci.auc(y, pred_prob)
AUC_and_95CI <- paste( round(AUC,3), ' (', round(AUC_95CI[1],3),'to',round(AUC_95CI[3],3),')')
# Brier score, calibration-in-the-large and calibration slope and 95% confidence interval
# calibration plot, Brier score, calibration-in-the-large and calibration slope
res <- val.prob(pred_prob, as.numeric(y))
# Bootstrapping different samples
data_bootstrap <- cbind(pred_prob, y)
boot_val <- boot_val(data_bootstrap)
# Brier Score and 95% CI
brier <- round(res['Brier'],3)
brier_boot <- unlist(map(boot_val, `[`, c("Brier"))) %>% as.numeric()
brier_boot_ci <- calc_ci("Brier",   boot_val, 3)
brier_and_95CI <- paste( brier, brier_boot_ci)
# Calibration-in-the-large and 95% CI
calibration_in_the_large <- round( res['Intercept'],3)
intercept_boot_ci <- calc_ci("Intercept", boot_val, 3)
intercept_and_95CI <- paste(xgboost_calibration_in_the_large, xgboost_intercept_boot_ci)
# Calibration slope and 95% CI
calibration_slope <- round(res['Slope'],3)
slope_boot_ci <- calc_ci("Slope",   boot_val, 3)
slope_and_95CI <- paste(calibration_slope, slope_boot_ci)
performance_List <- list("AUC" = AUC_and_95CI, "Brier" = brier_and_95CI, "Calibration-in-the-large" = intercept_and_95CI, "Calibration-Slope" = slope_and_95CI)
return()
}
validation_dataset_xgboost <- validation_dataset
validation_dataset_xgboost$mortality_30_day <- validation_dataset_xgboost$mortality_30_day %>% as.factor()
testtask <- makeClassifTask(data = as.data.frame(validation_dataset_xgboost),target = "mortality_30_day")
prob_xgboost <- predict(xgboost_model,testtask, type = "prob")
# Load pre-trained models -----------------------------------------------------
xgboost_model <- readRDS("XGBoost_pretrained_model.RDS")
testtask <- makeClassifTask(data = as.data.frame(validation_dataset_xgboost),target = "mortality_30_day")
prob_xgboost <- predict(xgboost_model,testtask, type = "prob")
xgboost_performance <- performance_function(prob_xgboost$data$prob.1, validation_dataset$mortality_30_day)
performance_function <- function(pred_prob,y){
# AUC and 95% CI
roc <- roc(y ~ pred_prob, plot = FALSE, print.auc = TRUE)
AUC <- as.numeric(roc$auc)
AUC_95CI <- ci.auc(y, pred_prob)
AUC_and_95CI <- paste( round(AUC,3), ' (', round(AUC_95CI[1],3),'to',round(AUC_95CI[3],3),')')
# Brier score, calibration-in-the-large and calibration slope and 95% confidence interval
# calibration plot, Brier score, calibration-in-the-large and calibration slope
res <- val.prob(pred_prob, as.numeric(y))
# Bootstrapping different samples
data_bootstrap <- cbind(pred_prob, y)
boot_val <- boot_val(data_bootstrap)
# Brier Score and 95% CI
brier <- round(res['Brier'],3)
brier_boot <- unlist(map(boot_val, `[`, c("Brier"))) %>% as.numeric()
brier_boot_ci <- calc_ci("Brier",   boot_val, 3)
brier_and_95CI <- paste( brier, brier_boot_ci)
# Calibration-in-the-large and 95% CI
calibration_in_the_large <- round( res['Intercept'],3)
intercept_boot_ci <- calc_ci("Intercept", boot_val, 3)
intercept_and_95CI <- paste(xgboost_calibration_in_the_large, xgboost_intercept_boot_ci)
# Calibration slope and 95% CI
calibration_slope <- round(res['Slope'],3)
slope_boot_ci <- calc_ci("Slope",   boot_val, 3)
slope_and_95CI <- paste(calibration_slope, slope_boot_ci)
performance_List <- list("AUC" = AUC_and_95CI, "Brier" = brier_and_95CI, "Calibration-in-the-large" = intercept_and_95CI, "Calibration-Slope" = slope_and_95CI)
return()
}
xgboost_performance <- performance_function(prob_xgboost$data$prob.1, validation_dataset$mortality_30_day)
# Functions needed-------------------------------------------------------
### functions for calculating 95% confidence interval by bootstrapping
boot_val <- function(data){
set.seed(48572)
out <- list()
data <- as.data.frame(data)
for(i in 1:500){
df <- sample_n(data, nrow(data), replace = TRUE)
out[[i]] <- val.prob(df[,1],df[,2])
}
return(out)
}
calc_ci <- function(metric, boot_vals, n){
x <- unlist(map(boot_vals, `[`, c(metric)))
paste0("(", round(quantile(x, 0.025), n), " to ",
round(quantile(x, 0.975), n), ")")
}
### function for calculating Brier Score, AUC, Calibraiton-in-the-large and calibration slope with 95% Confidence Interval
### Input: Predicted probability (pred_prob) and True binary outcome (y)
performance_function <- function(pred_prob,y){
# AUC and 95% CI
roc <- roc(y ~ pred_prob, plot = FALSE, print.auc = TRUE)
AUC <- as.numeric(roc$auc)
AUC_95CI <- ci.auc(y, pred_prob)
AUC_and_95CI <- paste( round(AUC,3), ' (', round(AUC_95CI[1],3),'to',round(AUC_95CI[3],3),')')
# Brier score, calibration-in-the-large and calibration slope and 95% confidence interval
# calibration plot, Brier score, calibration-in-the-large and calibration slope
res <- val.prob(pred_prob, as.numeric(y))
# Bootstrapping different samples
data_bootstrap <- cbind(pred_prob, y)
boot_val <- boot_val(data_bootstrap)
# Brier Score and 95% CI
brier <- round(res['Brier'],3)
brier_boot <- unlist(map(boot_val, `[`, c("Brier"))) %>% as.numeric()
brier_boot_ci <- calc_ci("Brier",   boot_val, 3)
brier_and_95CI <- paste( brier, brier_boot_ci)
# Calibration-in-the-large and 95% CI
calibration_in_the_large <- round( res['Intercept'],3)
intercept_boot_ci <- calc_ci("Intercept", boot_val, 3)
intercept_and_95CI <- paste(xgboost_calibration_in_the_large, xgboost_intercept_boot_ci)
# Calibration slope and 95% CI
calibration_slope <- round(res['Slope'],3)
slope_boot_ci <- calc_ci("Slope",   boot_val, 3)
slope_and_95CI <- paste(calibration_slope, slope_boot_ci)
performance_List <- list("AUC" = AUC_and_95CI, "Brier" = brier_and_95CI, "Calibration-in-the-large" = intercept_and_95CI, "Calibration-Slope" = slope_and_95CI)
return()
}
xgboost_performance <- performance_function(prob_xgboost$data$prob.1, validation_dataset$mortality_30_day)
performance_function <- function(pred_prob,y){
# AUC and 95% CI
roc <- roc(y ~ pred_prob, plot = FALSE, print.auc = TRUE)
AUC <- as.numeric(roc$auc)
AUC_95CI <- ci.auc(y, pred_prob)
AUC_and_95CI <- paste( round(AUC,3), ' (', round(AUC_95CI[1],3),'to',round(AUC_95CI[3],3),')')
# Brier score, calibration-in-the-large and calibration slope and 95% confidence interval
# calibration plot, Brier score, calibration-in-the-large and calibration slope
res <- val.prob(pred_prob, as.numeric(y))
# Bootstrapping different samples
data_bootstrap <- cbind(pred_prob, y)
boot_val <- boot_val(data_bootstrap)
# Brier Score and 95% CI
brier <- round(res['Brier'],3)
brier_boot <- unlist(map(boot_val, `[`, c("Brier"))) %>% as.numeric()
brier_boot_ci <- calc_ci("Brier",   boot_val, 3)
brier_and_95CI <- paste( brier, brier_boot_ci)
# Calibration-in-the-large and 95% CI
calibration_in_the_large <- round( res['Intercept'],3)
intercept_boot_ci <- calc_ci("Intercept", boot_val, 3)
intercept_and_95CI <- paste(calibration_in_the_large, intercept_boot_ci)
# Calibration slope and 95% CI
calibration_slope <- round(res['Slope'],3)
slope_boot_ci <- calc_ci("Slope",   boot_val, 3)
slope_and_95CI <- paste(calibration_slope, slope_boot_ci)
performance_List <- list("AUC" = AUC_and_95CI, "Brier" = brier_and_95CI, "Calibration-in-the-large" = intercept_and_95CI, "Calibration-Slope" = slope_and_95CI)
return()
}
xgboost_performance <- performance_function(prob_xgboost$data$prob.1, validation_dataset$mortality_30_day)
performance_function <- function(pred_prob,y){
# AUC and 95% CI
roc <- roc(y ~ pred_prob, plot = FALSE, print.auc = TRUE)
AUC <- as.numeric(roc$auc)
AUC_95CI <- ci.auc(y, pred_prob)
AUC_and_95CI <- paste( round(AUC,3), ' (', round(AUC_95CI[1],3),'to',round(AUC_95CI[3],3),')')
# Brier score, calibration-in-the-large and calibration slope and 95% confidence interval
# calibration plot, Brier score, calibration-in-the-large and calibration slope
res <- val.prob(pred_prob, as.numeric(y))
# Bootstrapping different samples
data_bootstrap <- cbind(pred_prob, y)
boot_val <- boot_val(data_bootstrap)
# Brier Score and 95% CI
brier <- round(res['Brier'],3)
brier_boot <- unlist(map(boot_val, `[`, c("Brier"))) %>% as.numeric()
brier_boot_ci <- calc_ci("Brier",   boot_val, 3)
brier_and_95CI <- paste( brier, brier_boot_ci)
# Calibration-in-the-large and 95% CI
calibration_in_the_large <- round( res['Intercept'],3)
intercept_boot_ci <- calc_ci("Intercept", boot_val, 3)
intercept_and_95CI <- paste(calibration_in_the_large, intercept_boot_ci)
# Calibration slope and 95% CI
calibration_slope <- round(res['Slope'],3)
slope_boot_ci <- calc_ci("Slope",   boot_val, 3)
slope_and_95CI <- paste(calibration_slope, slope_boot_ci)
performance_List <- list("AUC" = AUC_and_95CI, "Brier" = brier_and_95CI, "Calibration-in-the-large" = intercept_and_95CI, "Calibration-Slope" = slope_and_95CI)
return(performance_List)
}
xgboost_performance <- performance_function(prob_xgboost$data$prob.1, validation_dataset$mortality_30_day)
View(xgboost_performance)
validation_interaction <- model.matrix(mortality_30_day ~.^2, validation_dataset)[,-1]
prob_LR_elasnet_int <- LR_elasticnet_int_model %>% predict(newdata = validation_interaction, type = "prob")
LR_elasticnet_ineraction_performance <- performance_function(prob_LR_elasnet_int$`1`, validation_dataset$mortality_30_day)
View(LR_elasticnet_ineraction_performance)
###print the results--------------------------------------------------------------
print(xgboost_performance)
print(LR_elasticnet_ineraction_performance)
### functions for calculating net benefit for decision curve analysis
netBenefit <- function(predProb, trueClass){
netBenefit <- matrix(0,nrow = 100,ncol = 1)
for (i in 1:100) {
pt <- i*0.01
predClass <-  ifelse(predProb >= pt, 1,0)
pred <- factor(predClass,levels = c(0,1))
truth <- factor(trueClass,levels = c(0,1))
confuMatrix <- confusionMatrix(pred,truth)
a <- confuMatrix$table[2,2]/length(predClass)    # true positive count/n total number = Detection Rate
b <-  confuMatrix$table[2,1]/length(predClass)   # false positive count/n total number = Detection prevalence - detection rate
netBenefit[i] <- a - b*pt/(1-pt)
}
return(netBenefit)
}
# net benefit for treating all
netBenefit_all <- function(FPrate,pt){
1 - FPrate/(1-pt*0.01)
}
val.prob(prob_xgboost$data$prob.1, as.numeric(validation_dataset$mortality_30_day))
val.prob(prob_LR_elasnet_int$`1`, as.numeric(validation_dataset$mortality_30_day))
### calibration plots----------------------------------------
par(mfrow=c(1,2))
val.prob(prob_xgboost$data$prob.1, as.numeric(validation_dataset$mortality_30_day))
val.prob(prob_LR_elasnet_int$`1`, as.numeric(validation_dataset$mortality_30_day))
# Decision curve analysis
netBenefit_xgboost <- netBenefit(prob_xgboost$data$prob.1,validation_dataset$mortality_30_day )
netBenefit_LR_elasticnet_interaction <- netBenefit(prob_LR_elasnet_int$`1`,validation_dataset$mortality_30_day )
FPrate <- length(which(validation_dataset$mortality_30_day==0))/length(validation_dataset$mortality_30_day)
FPrate_test <- netBenefit_all(FPrate,1:100)
plot(netBenefit_xgboost,type="l",col="blue",ylim = c(-0.2,0.6),lty=1,xlab = "Threshold probability in %",ylab = "Net Benefit")
lines(netBenefit_LR_elasticnet_interaction, col="red",lty=1)
lines(FPrate_test,lty=3)
abline(h=0, col="blue")
legend(50,0.53, legend=c("XGBoost","LR with elastic net and interaction terms","Treating all","Y = 0, Treating none"),
col=c("blue", "red","black","blue"),lty = c(1,1,3,1),cex = 0.75)
par(new)
# Decision curve analysis
netBenefit_xgboost <- netBenefit(prob_xgboost$data$prob.1,validation_dataset$mortality_30_day )
netBenefit_LR_elasticnet_interaction <- netBenefit(prob_LR_elasnet_int$`1`,validation_dataset$mortality_30_day )
FPrate <- length(which(validation_dataset$mortality_30_day==0))/length(validation_dataset$mortality_30_day)
FPrate_test <- netBenefit_all(FPrate,1:100)
plot(netBenefit_xgboost,type="l",col="blue",ylim = c(-0.2,0.6),lty=1,xlab = "Threshold probability in %",ylab = "Net Benefit")
lines(netBenefit_LR_elasticnet_interaction, col="red",lty=1)
lines(FPrate_test,lty=3)
abline(h=0, col="blue")
legend(50,0.53, legend=c("XGBoost","LR with elastic net and interaction terms","Treating all","Y = 0, Treating none"),
col=c("blue", "red","black","blue"),lty = c(1,1,3,1),cex = 0.75)
### calibration plots----------------------------------------
par(mfrow=c(1,2))
# left XGBoost
val.prob(prob_xgboost$data$prob.1, as.numeric(validation_dataset$mortality_30_day))
# Right LR with elastic net and interaction terms
val.prob(prob_LR_elasnet_int$`1`, as.numeric(validation_dataset$mortality_30_day))
# Decision curve analysis
netBenefit_xgboost <- netBenefit(prob_xgboost$data$prob.1,validation_dataset$mortality_30_day )
netBenefit_LR_elasticnet_interaction <- netBenefit(prob_LR_elasnet_int$`1`,validation_dataset$mortality_30_day )
FPrate <- length(which(validation_dataset$mortality_30_day==0))/length(validation_dataset$mortality_30_day)
FPrate_test <- netBenefit_all(FPrate,1:100)
plot(netBenefit_xgboost,type="l",col="blue",ylim = c(-0.2,0.6),lty=1,xlab = "Threshold probability in %",ylab = "Net Benefit")
lines(netBenefit_LR_elasticnet_interaction, col="red",lty=1)
lines(FPrate_test,lty=3)
abline(h=0, col="blue")
legend(50,0.53, legend=c("XGBoost","LR with elastic net and interaction terms","Treating all","Y = 0, Treating none"),
col=c("blue", "red","black","blue"),lty = c(1,1,3,1),cex = 0.75)
plot.new()
plot(netBenefit_xgboost,type="l",col="blue",ylim = c(-0.2,0.6),lty=1,xlab = "Threshold probability in %",ylab = "Net Benefit")
lines(netBenefit_LR_elasticnet_interaction, col="red",lty=1)
lines(FPrate_test,lty=3)
abline(h=0, col="blue")
legend(50,0.53, legend=c("XGBoost","LR with elastic net and interaction terms","Treating all","Y = 0, Treating none"),
col=c("blue", "red","black","blue"),lty = c(1,1,3,1),cex = 0.75)
plot.new()
plot(netBenefit_xgboost,type="l",col="blue",ylim = c(-0.2,0.6),lty=1,xlab = "Threshold probability in %",ylab = "Net Benefit")
lines(netBenefit_LR_elasticnet_interaction, col="red",lty=1)
lines(FPrate_test,lty=3)
abline(h=0, col="blue")
legend(50,0.53, legend=c("XGBoost","LR with elastic net and interaction terms","Treating all","Y = 0, Treating none"),
col=c("blue", "red","black","blue"),lty = c(1,1,3,1),cex = 0.75)
# XGBoost
val.prob(prob_xgboost$data$prob.1, as.numeric(validation_dataset$mortality_30_day))
# XGBoost
val.prob(prob_xgboost$data$prob.1, as.numeric(validation_dataset$mortality_30_day))
# Right LR with elastic net and interaction terms
val.prob(prob_LR_elasnet_int$`1`, as.numeric(validation_dataset$mortality_30_day))
plot(netBenefit_xgboost,type="l",col="blue",ylim = c(-0.2,0.6),lty=1,xlab = "Threshold probability in %",ylab = "Net Benefit")
lines(netBenefit_LR_elasticnet_interaction, col="red",lty=1)
lines(FPrate_test,lty=3)
abline(h=0, col="blue")
legend(50,0.53, legend=c("XGBoost","LR with elastic net and interaction terms","Treating all","Y = 0, Treating none"),
col=c("blue", "red","black","blue"),lty = c(1,1,3,1),cex = 0.75)
legend(45,0.53, legend=c("XGBoost","LR with elastic net and interaction terms","Treating all","Y = 0, Treating none"),
col=c("blue", "red","black","blue"),lty = c(1,1,3,1),cex = 0.75)
plot(netBenefit_xgboost,type="l",col="blue",ylim = c(-0.2,0.6),lty=1,xlab = "Threshold probability in %",ylab = "Net Benefit")
lines(netBenefit_LR_elasticnet_interaction, col="red",lty=1)
lines(FPrate_test,lty=3)
abline(h=0, col="blue")
legend(45,0.53, legend=c("XGBoost","LR with elastic net and interaction terms","Treating all","Y = 0, Treating none"),
col=c("blue", "red","black","blue"),lty = c(1,1,3,1),cex = 0.75)
